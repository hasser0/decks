# Variables
assignment;; process of specifying a variable value after variable is created
initialization;; process of specifying an initial value to an object
default initialization;; int foo;
copy initialization;; int foo = 5;
direct initialization;; int foo ( 5 );
direct-list initialization;; int foo { 5 };
value initialization;; int foo {};
uninitialized variable;; variable with an unknown value
remove unused-variable warnings on variable|| [[maybe_unused]]
preferred initialization methods;; value and direct-list

# IO
<< operator name;; insertion operator
>> operator name;; extraction operator
scope resolution operator;; ::
print to console "hello"|| std::cout << "hello";
read input from console to variable foo|| std::cin >> foo;
std::endl vs \n;; std::endl flushes buffer and \n don't
preferred newline method;; \n
read input from console to a std:string foo including spaces;; std::getline(std::cin >> std:ws, foo);

# Functions
header files;; included from a .h file
header guards;; ifndef, ifdef, define macros to avoid duplicate declaration/definition
function prototype;; char* function_name(int param1, float param2);
function declaration;; declare existence of a function
function definition;; declare statements of a function
inline functions benefit;; avoid overload due function call
inline functions use cases;; one line simple functions

# Data Types
get number of bytes in an integer|| sizeof(int);
cast char variable foo to an integer;; static_cast<int>(foo);
when should std::string_view be used?;; read-only strings
declare fastest integer variable foo with size at least 16|| std::int_fast16_t foo;
declare integer variable foo with fixed size 16|| std::int16_t foo;
declare integer variable foo with 12 octal;; int foo { 012 };
declare integer variable foo with F hexadecimal;; int foo { 0xF };
declare integer variable foo with 11 binary;; int foo { 0b11 };
declare constant gravity with 9.8;; const float gravity { 9.8 };
declare constant foo from expression a + 1.2;; constexpr float foo { a + 1.2 };
declare a flexible/dynamic string foo;; std::string foo;
