# SOLID Principles
what is the S in SOLID and what is it about?;; Single Responsibility Principle states that a class should have a single reason to change
what is the O in SOLID and what is it about?;; Open-Close Principle states that a class should be open for extension (by using inheritance) and closed for modification
what is the L in SOLID and what is it about?;; Liskov Substitution Principle states that a base class should be able to substitute a child class
what is the I in SOLID and what is it about?;; Interface Segregation Principle states that we should not overload our interfaces and use several ones instead
what is the D in SOLID and what is it about?;; Dependency Inversion Principle states that high-level classes should use low-level abstractions and not be concerned with the implementation
what is gamma categorization?;; a classification for design patterns
    Creational Patterns;; constructor or mechanism, piecewise or wholesale
    Structural Patterns;; wrappers to mimic interfaces
    Behavioral Patterns;; no central theme
what creational design patterns exist?;;
    Builder
    Factory
    Prototype
    Singleton

# Use cases
when is the Builder pattern recommended?;; when the creation of an object should be done step by step
when is the Factory pattern recommended?;; when the creation of an object should be done entirely and it's a complicated process, but there's a single factory
when is the Abstract Factory pattern recommended?;; when there are several families of related classes and a single factory is not enough
when is the Prototype pattern recommended?;; when there are object attributes that we want to repeat multiple times
when is the Singleton pattern recommended?;; when only one object makes sense, the initializer is expensive, or to implement factories

